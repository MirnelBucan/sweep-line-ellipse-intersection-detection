//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "main.h"
#include <algorithm>
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForma *Forma;
//---------------------------------------------------------------------------
__fastcall TForma::TForma(TComponent* Owner)
	: TForm(Owner)
{
	Slika->Canvas->FillRect(Rect(0,0,Slika->Width,Slika->Height));
	pocetna_tacka_duzi = nullptr;
	odredjen_centar = false;
    brojac = 0;
}
//---------------------------------------------------------------------------
void TForma::dodajTacku(Tacka nova) {
	tacke.push_back(nova);
	nova.Crtaj(Slika);
}
//---------------------------------------------------------------------------
void __fastcall TForma::GenerisanjeTacakaClick(TObject *Sender)
{
  int broj_tacaka = EditBrojTacaka->Text.ToInt();
  for(int i=0;i<broj_tacaka;i++) {
	  Tacka nova(rand()%(Slika->Width),rand()%(Slika->Height));
	  dodajTacku(nova);
  }
}
//---------------------------------------------------------------------------

void __fastcall TForma::SlikaMouseMove(TObject *Sender, TShiftState Shift, int X,
          int Y)
{
	EditKoordinate->Text = "( " + IntToStr(X) + " , " + IntToStr(Y) + " )";
	if(crtanjeKrugova->Checked && odredjen_centar) {
	   Slika->Canvas->FillRect(Rect(0,0,Slika->Width,Slika->Height));
	   for(int i=0;i<krugovi.size();i++)
		 krugovi[i].Crtaj(Slika);
	   Krug privremeni(centar, Udaljenost(centar,Tacka(X,Y)));
	   privremeni.Crtaj(Slika);

	} else if(crtanjeElipsi->Checked && odredjen_centar) {
	   Slika->Canvas->FillRect(Rect(0,0,Slika->Width,Slika->Height));
	   for(int i=0;i<elipse.size();i++)
		 elipse[i].Crtaj(Slika);


	   Elipsa elipsaTmp(pocetnaElipse, Tacka(X,Y) );
	   elipsaTmp.Crtaj(Slika);
	}
}
//---------------------------------------------------------------------------

void __fastcall TForma::DugmeProstiMnogougaoClick(TObject *Sender)
{
   for(int i=1;i<tacke.size();i++)
	 if(tacke[i] < tacke[0])
	   swap(tacke[i],tacke[0]);

   Tacka prva = tacke[0];
   sort(tacke.begin()+1,tacke.end(),[prva](Tacka A, Tacka B) {
										return Orijentacija(prva,A,B) < 0;
									});

   iscrtajPoligon(tacke,Slika);

}
//---------------------------------------------------------------------------

void __fastcall TForma::SlikaMouseDown(TObject *Sender, TMouseButton Button, TShiftState Shift,
          int X, int Y)
{
	if(UnutarKonveksnog->Checked) {
	  if(daLiJeUnutarKonveksnog(Tacka(X,Y)))
		ShowMessage("Tacka je unutar mnogougla");
	  else {
		int lijevi,desni;
		povuciTangente(Tacka(X,Y),lijevi,desni);
		Slika->Canvas->MoveTo(konveksni_omotac[desni].x,konveksni_omotac[desni].y);
		Slika->Canvas->LineTo(X,Y);
		Slika->Canvas->LineTo(konveksni_omotac[lijevi].x,konveksni_omotac[lijevi].y);
	  }
	}
	else if(DodavanjeTacaka->Checked) {
			Tacka nova(X,Y);
			dodajTacku(nova);
	}
	else if(UnutarProstog->Checked) {
			int brojac = 0;
			Duz poluprava(Tacka(X,Y),Tacka(Slika->Width,Slika->Height));
			for(int i=0;i<tacke.size();i++) {
				Duz trenutna(tacke[i],tacke[(i+1)%tacke.size()]);
				if(PresjekDuzi(poluprava,trenutna) == 1)
				  brojac++;
			}
			if(brojac%2 == 1)
			  ShowMessage("Tacka je unutar mnogougla");
			else ShowMessage("Tacka nije unutar mnogougla");
	}
	else if(CrtanjeMnogougla->Checked) {
		Tacka nova(X,Y);
		if(!tacke.empty())
		   Slika->Canvas->LineTo(X,Y);
        else Slika->Canvas->MoveTo(X,Y);
		dodajTacku(nova);
	}
	else if(DodavanjeDuzi->Checked) {
		if(!pocetna_tacka_duzi) {
			pocetna_tacka_duzi = new Tacka(X,Y);
			pocetna_tacka_duzi->Crtaj(Slika);
		}
		else {
			Duz nova(*pocetna_tacka_duzi, Tacka(X,Y));
			duzi.push_back(nova);
			nova.Crtaj(Slika);
			pocetna_tacka_duzi = nullptr;
		}

	}
	else if(crtanjeKrugova->Checked) {
		if(!odredjen_centar) {
			centar = Tacka(X,Y);
			centar.Crtaj(Slika);
		}
		else {
			Krug novi(centar,Udaljenost(centar,Tacka(X,Y)));
			krugovi.push_back(novi);
			Slika->Canvas->FillRect(Rect(0,0,Slika->Width,Slika->Height));
			for(int i=0;i<krugovi.size();i++)
			  krugovi[i].Crtaj(Slika);
		}
        odredjen_centar = !odredjen_centar;
    }
	else if(crtanjeElipsi->Checked) {
		if(!odredjen_centar) {
			pocetnaElipse = Tacka(X,Y);
			krajnjaElipse = Tacka(X,Y);
			//centar.Crtaj(Slika);
		}
		else {
			krajnjaElipse = Tacka(X,Y);
			Elipsa novaElipsa(pocetnaElipse, krajnjaElipse);

			elipse.push_back(novaElipsa);
			Slika->Canvas->FillRect(Rect(0,0,Slika->Width,Slika->Height));
			for(int i=0;i<elipse.size();i++)
			  elipse[i].Crtaj(Slika);
		}
        odredjen_centar = !odredjen_centar;
	}
}
//---------------------------------------------------------------------------

void __fastcall TForma::DugmeKonveksniClick(TObject *Sender)
{
   int indeks = 0;
   for(int i=1;i<tacke.size();i++)
	 if(tacke[i] < tacke[indeks])
	   indeks = i;

   konveksni_omotac.push_back(tacke[indeks]);

   while(true) {
	  int novi_indeks = 0;
	  if(indeks == 0)
		novi_indeks = 1;
	  for(int i = 0;i < tacke.size();i++) {
		  if(i != indeks && i != novi_indeks) {
			  if(Orijentacija(tacke[indeks],tacke[novi_indeks],tacke[i]) > 0)
				novi_indeks = i;


		  }
	  }
	  indeks = novi_indeks;
	  if(konveksni_omotac[0] == tacke[indeks])
		break;
	  else
		konveksni_omotac.push_back(tacke[indeks]);

   }
   iscrtajPoligon(konveksni_omotac,Slika);

}
//---------------------------------------------------------------------------
/*
Graham Scan algoritam
Pogledati najprije opis algoritma na:
https://www.commonlounge.com/discussion/a599732d13734c7faf0d70eff960ee05
Razmislite najprije zasto je algoritam korektan
tj. zasto se dobija konveksni omotac
Nakon toga razmislite zasto je vrijeme izvrsavanja
O(n log n), i to zbog sortiranja, a dio nakon toga
je cak u vremenu O(n)
Mi cemo za pocetnu tacku uzeti onu sa najmanjom
x koordinatom (dakle najljevlju), te ostale
sortirati po uglovima (kao za prosti mnogougao)
*/
void __fastcall TForma::DugmeGrahamScanClick(TObject *Sender)
{
   int indeks = 0;
   for(int i=1;i<tacke.size();i++)
	 if(tacke[i] < tacke[indeks])
	   indeks = i;

   konveksni_omotac.push_back(tacke[indeks]);
   swap(tacke[0],tacke[indeks]);

   Tacka prva(tacke[0]);
   sort(tacke.begin()+1,tacke.end(),[prva](Tacka A, Tacka B) {
										return Orijentacija(prva,A,B) < 0;
									});

   konveksni_omotac.push_back(tacke[1]);
   konveksni_omotac.push_back(tacke[2]);
   for(int i = 3;i<tacke.size();i++) {
	  while(Orijentacija(konveksni_omotac[konveksni_omotac.size()-2],
			konveksni_omotac[konveksni_omotac.size()-1],
			tacke[i]) == 1)
		        konveksni_omotac.pop_back();
	  konveksni_omotac.push_back(tacke[i]);
   }
   iscrtajPoligon(konveksni_omotac,Slika);

}
//---------------------------------------------------------------------------

bool TForma::daLiJeUnutarKonveksnog(Tacka A) {
   int pocetak = 0, kraj = konveksni_omotac.size()-1;
   while(kraj - pocetak > 1) {
	   int sredina = (pocetak+kraj)/2;
	   if(daLiJeTackaUnutarTrougla(A, Trougao(konveksni_omotac[pocetak],
											  konveksni_omotac[sredina],
											  konveksni_omotac[kraj])))
		 return true;

	   if(Orijentacija(konveksni_omotac[pocetak],konveksni_omotac[sredina],A) > 0)
		  kraj = sredina;
	   else pocetak = sredina;
   }
   return false;
}

void TForma::povuciTangente(Tacka A, int &lijevi, int &desni) {
	lijevi = -1;
	int n = konveksni_omotac.size();
	int pocetak = 0, kraj = n - 1;
	while(kraj - pocetak > 0) {
		int sredina = (pocetak + kraj) / 2;
		if(Orijentacija(A,konveksni_omotac[sredina],konveksni_omotac[(sredina+n-1)%n]) < 0 &&
		   Orijentacija(A,konveksni_omotac[sredina],konveksni_omotac[sredina+1]) < 0){
			  lijevi = sredina;
			  break;
		}
		if(Orijentacija(A,konveksni_omotac[sredina],konveksni_omotac[sredina+1]) < 0) {
		   if(Orijentacija(A,konveksni_omotac[sredina],konveksni_omotac[kraj]) < 0 ||
			  Orijentacija(A,konveksni_omotac[kraj],konveksni_omotac[pocetak]) > 0)
				kraj = sredina - 1;
		   else pocetak = sredina + 1;
		}
		else {
		   if(Orijentacija(A,konveksni_omotac[sredina],konveksni_omotac[pocetak]) < 0 ||
			  Orijentacija(A,konveksni_omotac[kraj],konveksni_omotac[pocetak]) < 0)
				pocetak = sredina + 1;
		   else kraj = sredina - 1;
		}
	}
	if(lijevi == -1)
	   lijevi = pocetak;

	desni = -1;
	pocetak = 0;
	kraj = n - 1;
	while(kraj - pocetak > 0) {
		int sredina = (pocetak + kraj) / 2;
		if(Orijentacija(A,konveksni_omotac[sredina],konveksni_omotac[(sredina+n-1)%n]) > 0 &&
		   Orijentacija(A,konveksni_omotac[sredina],konveksni_omotac[sredina+1]) > 0){
			  desni = sredina;
			  break;
		}
		if(Orijentacija(A,konveksni_omotac[sredina],konveksni_omotac[sredina+1]) > 0) {
		   if(Orijentacija(A,konveksni_omotac[sredina],konveksni_omotac[kraj]) > 0 ||
			  Orijentacija(A,konveksni_omotac[kraj],konveksni_omotac[pocetak]) < 0)
				kraj = sredina - 1;
		   else pocetak = sredina + 1;
		}
		else {
		   if(Orijentacija(A,konveksni_omotac[sredina],konveksni_omotac[pocetak]) > 0 ||
			  Orijentacija(A,konveksni_omotac[kraj],konveksni_omotac[pocetak]) > 0)
				pocetak = sredina + 1;
		   else kraj = sredina - 1;
		}
	}
	if(desni == -1)
	   desni = pocetak;
}

void __fastcall TForma::KonveksniInduktivnoClick(TObject *Sender)
{
   konveksni_omotac.push_back(tacke[0]);
   konveksni_omotac.push_back(tacke[1]);
   konveksni_omotac.push_back(tacke[2]);
   if(Orijentacija(konveksni_omotac[0],
				   konveksni_omotac[1],
				   konveksni_omotac[2]) == 1)
	 swap(konveksni_omotac[1],konveksni_omotac[2]);

   for(int i=3;i<tacke.size();i++)
	 if(!daLiJeUnutarKonveksnog(tacke[i])) {
		 int lijevi = -1, desni = -1;
		 povuciTangente(tacke[i],lijevi,desni);
		 if(desni < lijevi) {
			 konveksni_omotac.erase(konveksni_omotac.begin()+desni+1,
									konveksni_omotac.begin()+lijevi);
			 konveksni_omotac.insert(konveksni_omotac.begin()+desni+1,tacke[i]);
		 }
		 else {
             konveksni_omotac.erase(konveksni_omotac.begin()+desni+1,
									konveksni_omotac.end());
			 konveksni_omotac.erase(konveksni_omotac.begin(),
									konveksni_omotac.begin()+lijevi);
			 konveksni_omotac.push_back(tacke[i]);


		 }
	 }
     iscrtajPoligon(konveksni_omotac,Slika);

}
//---------------------------------------------------------------------------
void TForma::pomjeriIteratorNaprijed(typename list<pair<Tacka,int>>::iterator &it, list<pair<Tacka,int>> &lista_tacaka) {
	it++;
	if(it == lista_tacaka.end())
	  it = lista_tacaka.begin();
}

void TForma::pomjeriIteratorNazad(typename list<pair<Tacka,int>>::iterator &it, list<pair<Tacka,int>> &lista_tacaka) {
	if(it!=lista_tacaka.begin())
	  it--;
	else it = --lista_tacaka.end();
}

void __fastcall TForma::TriangulacijaClick(TObject *Sender)
{

   int n = tacke.size();
   list<pair<Tacka,int>> lista_tacaka;
   for(int i=0;i<n;i++)
	 lista_tacaka.push_back({tacke[i],i});
   auto trenutna = lista_tacaka.begin();
   while(lista_tacaka.size() > 3) {
	   auto prethodna = trenutna, naredna = trenutna;
	   pomjeriIteratorNazad(prethodna,lista_tacaka);
	   pomjeriIteratorNaprijed(naredna,lista_tacaka);

	   if(Orijentacija(prethodna->first,trenutna->first,naredna->first)==-1) {
		   Trougao trenutni(prethodna->first,trenutna->first,naredna->first);
		   bool uho = true;
		   auto it = naredna;
		   pomjeriIteratorNaprijed(it,lista_tacaka);

		   while(it != prethodna) {
			   if(daLiJeTackaUnutarTrougla(it->first,trenutni)) {
				   uho = false;
				   break;
			   }
			   pomjeriIteratorNaprijed(it,lista_tacaka);
		   }
		   if(uho == true) {
			   dijagonale.push_back({Duz(prethodna->first,naredna->first), {prethodna->second, naredna->second}});
			   lista_tacaka.erase(trenutna);
			   trenutna = prethodna;
           }
	   }
	   pomjeriIteratorNaprijed(trenutna,lista_tacaka);
   }
   for(int i=0;i<dijagonale.size();i++)
	 dijagonale[i].first.Crtaj(Slika);
}
//---------------------------------------------------------------------------

void __fastcall TForma::ZavrsiMnogougaoClick(TObject *Sender)
{
   Slika->Canvas->LineTo(tacke[0].x,tacke[0].y);
}
//---------------------------------------------------------------------------

void __fastcall TForma::ClearClick(TObject *Sender)
{
  Slika->Canvas->FillRect(Rect(0,0,Slika->Width,Slika->Height));
  tacke.clear();
  konveksni_omotac.clear();
  dijagonale.clear();
  duzi.clear();
  krugovi.clear();
  elipse.clear();
  odredjen_centar = false;
}
//---------------------------------------------------------------------------

void __fastcall TForma::HorVerDuziClick(TObject *Sender)
{
  int broj_duzi = EditBrojDuzi->Text.ToInt();
  for(int i=0;i<broj_duzi;i++) {
	  bool horizontalna = rand()%2;
	  if(horizontalna) {
		 int Y = rand()%Slika->Height;
		 int X1 = rand()%Slika->Width;
		 int X2 = rand()%Slika->Width;
		 Duz nova(Tacka(X1,Y),Tacka(X2,Y),horizontalna);
		 duzi.push_back(nova);
		 nova.Crtaj(Slika);
	  }
	  else {
		 int Y1 = rand()%Slika->Height;
		 int Y2 = rand()%Slika->Height;
		 int X = rand()%Slika->Width;
		 Duz nova(Tacka(X,Y1),Tacka(X,Y2),horizontalna);
		 duzi.push_back(nova);
		 nova.Crtaj(Slika);
      }
  }
}
//---------------------------------------------------------------------------

void __fastcall TForma::DugmePresjekHorVerClick(TObject *Sender)
{
  priority_queue<pair<Tacka,Duz*>, vector<pair<Tacka,Duz*>>, ManjePoX> eventi;
  for(int i=0;i<duzi.size();i++) {
	  if(duzi[i].horizontalna) {
		  eventi.push({duzi[i].pocetna, &duzi[i]});
		  eventi.push({duzi[i].krajnja, &duzi[i]});
	  }
	  else eventi.push({duzi[i].pocetna, &duzi[i]});
  }

  set<Duz*, HorDuziPoY> aktivne;
  Slika->Canvas->Brush->Color = clRed;
  while(!eventi.empty()) {
	  auto trenutni = eventi.top();
	  eventi.pop();
	  if(trenutni.second->horizontalna) {
		  if(trenutni.first == trenutni.second->pocetna)
			aktivne.insert(trenutni.second);
		  else aktivne.erase(trenutni.second);
	  }
	  else {
		  Duz gornja_tacka(trenutni.second->pocetna,trenutni.second->pocetna);
		  Duz donja_tacka(trenutni.second->krajnja,trenutni.second->krajnja);
		  auto it_pocetak = aktivne.lower_bound(&gornja_tacka);
		  auto it_kraj = aktivne.upper_bound(&donja_tacka);
		  for(auto it = it_pocetak; it != it_kraj; it++) {

			  Tacka presjek(trenutni.first.x, (*it)->pocetna.y);
              presjek.Crtaj(Slika);
          }
	  }
  }
}
//---------------------------------------------------------------------------

void __fastcall TForma::DugmePresjekDuziClick(TObject *Sender)
{
  priority_queue<pair<Tacka,Duz*>, vector<pair<Tacka,Duz*>>, ManjePoX> eventi;

  for(int i=0;i<duzi.size();i++) {
	  eventi.push({duzi[i].pocetna,&duzi[i]});
	  eventi.push({duzi[i].krajnja,&duzi[i]});
  }

  set<Duz*,DuziIspodIznad> aktivne;

  while(!eventi.empty()) {
	  auto trenutni = eventi.top();
	  eventi.pop();

	  //ako smo naisli na pocetnu tacku neke duzi
	  if(trenutni.first == trenutni.second->pocetna) {
		  aktivne.insert(trenutni.second);
		  auto it = aktivne.find(trenutni.second);
		  //provjera da li se sijece sa prethodnom u stablu
		  if(it != aktivne.begin()) {
			Duz prethodna = **(--it);
			it++;
			if(PresjekDuzi(**it, prethodna) == 1) {
				Tacka presjek = TackaPresjekaPravih(**it, prethodna);
				presjek.Crtaj(Slika);
				ShowMessage("Ima presjeka");
				break;
			}
		  }
		  //provjera da li se sijece sa narednom u stablu
		  if(it != --aktivne.end()) {
			Duz naredna = **(++it);
			it--;
			if(PresjekDuzi(**it, naredna) == 1)  {
				Tacka presjek = TackaPresjekaPravih(**it, naredna);
				presjek.Crtaj(Slika);
				ShowMessage("Ima presjeka");
				break;
			}
		  }
	  }

	  //ako smo naisli na krajnju tacku neke duzi
	  else {
		 auto it = aktivne.find(trenutni.second);
		 if(it != aktivne.begin() && it != --aktivne.end()) {
			 auto prethodna = it;
			 prethodna--;
			 auto naredna = it;
			 naredna++;
			 if(PresjekDuzi(**prethodna,**naredna)==1) {
                 Tacka presjek = TackaPresjekaPravih(**prethodna, **naredna);
				 presjek.Crtaj(Slika);
				 ShowMessage("Ima presjeka");
				 break;
			 }
		 }
		 aktivne.erase(it);
	  }
  }

}
//---------------------------------------------------------------------------


//---------------------------------------------------------------------------

void __fastcall TForma::presjekKrugovaClick(TObject *Sender)
{
  priority_queue<pair<Tacka, pair<Krug*, bool>>, vector<pair<Tacka, pair<Krug*, bool>>>,
   ManjePoXKrugovi> eventi;
  for(int i=0;i<krugovi.size();i++) {
	  Tacka pocetna(Tacka(krugovi[i].centar.x - krugovi[i].r,krugovi[i].centar.y));
	  eventi.push({pocetna,{&krugovi[i],true}}); //gornji
	  eventi.push({pocetna,{&krugovi[i],false}}); //donji
	  Tacka krajnja(Tacka(krugovi[i].centar.x + krugovi[i].r,krugovi[i].centar.y));
	  eventi.push({krajnja,{&krugovi[i],true}}); //gornji
	  eventi.push({krajnja,{&krugovi[i],false}}); //donji
  }

  set<pair<Krug*,bool>, PolukrugoviIspodIznad> aktivni;

  while(!eventi.empty()) {
	  //ShowMessage(eventi.size());
	  auto trenutni = eventi.top();
	  eventi.pop();

	  //ako smo naisli na pocetnu tacku nekog polukruga
	  if(trenutni.first < trenutni.second.first->centar) {
		  aktivni.insert(trenutni.second);
		  auto it = aktivni.find(trenutni.second);
		  //provjera da li se sijece sa prethodnom u stablu
		  if(it != aktivni.begin()) {
			auto prethodna = *((--it)->first);
			it++;
			if(PresjekKrugova(*(it->first), prethodna) == 1) {
				//Tacka presjek = TackaPresjekaPravih(**it, prethodna);
				//presjek.Crtaj(Slika);
				ShowMessage("Ima presjeka");
				break;
			}
		  }
		  //provjera da li se sijece sa narednom u stablu
		  if(it != --aktivni.end()) {
			auto naredna = *((++it)->first);
			it--;
			if(PresjekKrugova(*(it->first), naredna) == 1)  {
				//Tacka presjek = TackaPresjekaPravih(**it, naredna);
				//presjek.Crtaj(Slika);
				ShowMessage("Ima presjeka");
				break;
			}
		  }
	  }

	  //ako smo naisli na krajnju tacku nekog polukruga
	  else {
		 auto it = aktivni.find(trenutni.second);
		 if(it != aktivni.begin() && it != --aktivni.end()) {
			 auto prethodna = it;
			 prethodna--;
			 auto naredna = it;
			 naredna++;
			 if(PresjekKrugova(*(prethodna->first),*(naredna->first))==1) {
				 //Tacka presjek = TackaPresjekaPravih(**prethodna, **naredna);
				 //presjek.Crtaj(Slika);
				 ShowMessage("Ima presjeka");
				 break;
			 }
		 }
		 aktivni.erase(it);
	  }
  }
  //ShowMessage("Nema presjeka");
}
//---------------------------------------------------------------------------

void __fastcall TForma::presjekElipsiClick(TObject *Sender)
{
	 priority_queue<pair<Tacka, pair<Elipsa*, bool>>, vector<pair<Tacka, pair<Elipsa*, bool>>>, ManjePoXElipse> eventi;
  for(int i=0;i<elipse.size();i++) {
	  Tacka pocetna(Tacka(elipse[i].centar.x - elipse[i].a,elipse[i].centar.y));
	  eventi.push({pocetna,{&elipse[i],true}}); //gornji
	  eventi.push({pocetna,{&elipse[i],false}}); //donji
	  Tacka krajnja(Tacka(elipse[i].centar.x + elipse[i].a,elipse[i].centar.y));
	  eventi.push({krajnja,{&elipse[i],true}}); //gornji
	  eventi.push({krajnja,{&elipse[i],false}}); //donji
  }

  set<pair<Elipsa*,bool>, PoluelipseIspodIznad> aktivni;

  while(!eventi.empty()) {
	  //ShowMessage(eventi.size());
	  auto trenutni = eventi.top();
	  eventi.pop();

	  //ako smo naisli na pocetnu tacku nekog polukruga
	  if(trenutni.first < trenutni.second.first->centar) {
		  aktivni.insert(trenutni.second);
		  auto it = aktivni.find(trenutni.second);
		  //provjera da li se sijece sa prethodnom u stablu
		  if(it != aktivni.begin()) {
			auto prethodna = *((--it)->first);
			it++;
			if(PresjekElipsi(*(it->first),it->second, prethodna, Slika)) {
				//Tacka presjek = TackaPresjekaPravih(**it, prethodna);
				//presjek.Crtaj(Slika);
				ShowMessage("Ima presjeka");
				break;
			}
		  }
		  //provjera da li se sijece sa narednom u stablu
		  if(it != --aktivni.end()) {
			auto naredna = *((++it)->first);
			it--;
			if(PresjekElipsi(*(it->first),it->second, naredna,Slika))  {
				//Tacka presjek = TackaPresjekaPravih(**it, naredna);
				//presjek.Crtaj(Slika);
				ShowMessage("Ima presjeka");
				break;
			}
		  }
	  }

	  //ako smo naisli na krajnju tacku nekog polukruga
	  else {
		 auto it = aktivni.find(trenutni.second);
		 if(it != aktivni.begin() && it != --aktivni.end()) {
			 auto prethodna = it;
			 prethodna--;
			 auto naredna = it;
			 naredna++;
			 if(PresjekElipsi(*(prethodna->first),prethodna->second,
			 *(naredna->first), Slika)) {
				 //Tacka presjek = TackaPresjekaPravih(**prethodna, **naredna);
				 //presjek.Crtaj(Slika);
				 ShowMessage("Ima presjeka");
				 break;
			 }
		 }
		 aktivni.erase(it);
	  }
  }
}
//---------------------------------------------------------------------------

